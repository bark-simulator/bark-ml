# Copyright (c) 2020 fortiss GmbH
#
# Authors: Patrick Hart
#
# This work is licensed under the terms of the MIT license.
# For a copy, see <https://opensource.org/licenses/MIT>.

try:
    import debug_settings
except:
    pass

import unittest
import numpy as np
import os
import gym
import matplotlib
import time

# BARK imports
from bark.runtime.commons.parameters import ParameterServer

# BARK-ML imports
from bark_ml.environments.blueprints import \
  DiscreteHighwayBlueprint
from bark_ml.environments.single_agent_runtime import SingleAgentRuntime
import bark_ml.environments.gym  # pylint: disable=unused-import
from bark_ml.library_wrappers.lib_fqf_iqn_qrdqn.model_wrapper \
 import pytorch_script_wrapper
from bark_ml.library_wrappers.lib_fqf_iqn_qrdqn.agent import IQNAgent, FQFAgent, QRDQNAgent


class PyLibraryWrappersPyTorchAgentTests(unittest.TestCase):
  """TorchAgentTests tests."""

  # make sure the agent works
  def test_agent_wrapping(self):
    params = ParameterServer()
    env = gym.make("highway-v1", params=params)
    env.reset()
   # agent = IQNAgent(env=env, test_env=env, params=params)
    params["ML"]["BaseAgent"]["MaxEpisodeSteps"] = 2
    params["ML"]["BaseAgent"]["NumEvalEpisodes"] = 2
    agent = FQFAgent(env=env, params=params)
    agent.train_episode()
    agent.evaluate()
   # agent = QRDQNAgent(env=env, test_env=env, params=params)

  # assign as behavior model (to check if trained agent can be used)
  def test_behavior_wrapping(self):
    # create scenario
    params = ParameterServer()
    bp = DiscreteHighwayBlueprint(params, num_scenarios=10, random_seed=0)
    env = SingleAgentRuntime(blueprint=bp, render=False)
    #env = gym.make("highway-v1", params=params)
    ml_behaviors = []
   # ml_behaviors.append(IQNAgent(env=env, test_env=env, params=params))
    ml_behaviors.append(FQFAgent(env=env, params=params))
   # ml_behaviors.append(QRDQNAgent(env=env, test_env=env, params=params))

    for ml_behavior in ml_behaviors:
      # set agent
      env.ml_behavior = ml_behavior
      env.reset()
      action = np.random.randint(low=0, high=env.action_space.n)
      observed_next_state, reward, done, info = env.step(action)
      print(
          f"Observed state: {observed_next_state}, Reward: {reward}, Done: {done}"
      )

      # action is set externally
      ml_behavior._set_action_externally = True
      agent_id = list(env._world.agents.keys())[0]
      observed_world = env._world.Observe([agent_id])[0]

      # do a random action and plan trajectory
      action = np.random.randint(low=1, high=env.action_space.n)
      ml_behavior.ActionToBehavior(action)
      a = ml_behavior.Plan(0.2, observed_world)

      # sample another different random action
      another_action = action
      while another_action == action:
        another_action = np.random.randint(low=1, high=env.action_space.n)

      # plan trajectory for the another action
      ml_behavior.ActionToBehavior(another_action)
      b = ml_behavior.Plan(0.2, observed_world)

      # the trajectory generated by two different actions shoould be different
      self.assertEqual(np.any(np.not_equal(a, b)), True)

      # action will be calculated within the Plan(..) fct.
      ml_behavior._set_action_externally = False
      a = ml_behavior.Plan(0.2, observed_world)
      b = ml_behavior.Plan(0.2, observed_world)
      last_action = ml_behavior.GetLastAction()
      self.assertTrue(isinstance(last_action, float))

      # same trajectory for same state
      np.testing.assert_array_equal(a, b)

  def test_agents(self):
    params = ParameterServer()
    params["ML"]["BaseAgent"]["NumSteps"] = 2
    params["ML"]["BaseAgent"]["MaxEpisodeSteps"] = 2

    bp = DiscreteHighwayBlueprint(params, num_scenarios=10, random_seed=0)
    env = SingleAgentRuntime(blueprint=bp, render=False)

    # IQN Agent
    # iqn_agent = IQNAgent(env=env, test_env=env, params=params)
    # env.ml_behavior = iqn_agent
    # self.assertEqual(env.ml_behavior.set_action_externally, False)
    # iqn_agent.run()
    # self.assertEqual(env.ml_behavior.set_action_externally, True)

    # FQF Agent
    fqf_agent = FQFAgent(env=env, params=params)
    env.ml_behavior = fqf_agent
    self.assertEqual(env.ml_behavior.set_action_externally, False)
    fqf_agent.run()
    self.assertEqual(env.ml_behavior.set_action_externally, True)

    # QRDQN Agent
    # qrdqn_agent = QRDQNAgent(env=env, test_env=env, params=params)
    # env.ml_behavior = qrdqn_agent
    # self.assertEqual(env.ml_behavior.set_action_externally, False)
    # qrdqn_agent.run()
    # self.assertEqual(env.ml_behavior.set_action_externally, True)

if __name__ == '__main__':
  unittest.main()
